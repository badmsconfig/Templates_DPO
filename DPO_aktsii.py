# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Selenium, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ChromeDriver –∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import time
from pathlib import Path
import yaml
from datetime import datetime
import re


# üîß –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞ –≤ headless-—Ä–µ–∂–∏–º–µ
def get_driver():
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--window-size=1920,1080")
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
    return driver


# üìÑ –°–ª–æ–≤–∞—Ä—å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–∫—Ü–∏–π
SELECTORS = {
    "main_title": (By.CSS_SELECTOR, "h1.stock__title"),
    "meta_title": (By.TAG_NAME, "title"),
    "meta_description": (By.XPATH, "//meta[@name='description']"),
    "intro_paragraph": (By.XPATH, "(//div[contains(@class, 'stock__desc')])[1]//p"),
    "section_titles": (By.CSS_SELECTOR, "h2.stock__block-title"),
    "toggle_button": (By.XPATH,
                      "./following-sibling::div[contains(@class, 'stock__block-info')]//button[contains(@class, 'stock_info_btn')]"),
    "section_info": (By.XPATH,
                     "./following-sibling::div[contains(@class, 'stock__block-info')]//*[self::div[contains(@class, 'stock__block-cat')] or self::div[contains(@class, 'stock__block-text')]]"),
    "section_desc_container": (By.XPATH, "./following-sibling::div[contains(@class, 'stock__block-desc')]"),
    "section_desc": (By.XPATH, "./following-sibling::div[contains(@class, 'stock__block-desc')]//p"),
    "final_paragraph": (By.XPATH, "(//div[contains(@class, 'stock__desc')])[last()]//p")
}


# üß† –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
def extract_metadata(driver, url):
    metadata = {}
    try:
        title_element = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located(SELECTORS["meta_title"])
        )
        metadata["title"] = title_element.get_attribute("innerText").strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
        metadata["title"] = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

    try:
        desc_element = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located(SELECTORS["meta_description"])
        )
        metadata["description"] = desc_element.get_attribute("content").strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ meta description: {str(e)}")
        try:
            intro_elements = WebDriverWait(driver, 10).until(
                EC.presence_of_all_elements_located(SELECTORS["intro_paragraph"])
            )
            intro_text = " ".join([elem.text.strip() for elem in intro_elements if elem.text.strip()])
            metadata["description"] = re.sub(r'[#*\[\]]', '', intro_text)[:160].strip() + "..."
        except:
            metadata["description"] = "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    metadata["url"] = url
    metadata["date"] = datetime.now().strftime("%Y-%m-%d")
    metadata["categories"] = ["–ê–∫—Ü–∏–∏", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"]
    metadata["tags"] = ["–î–ü–û", "–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–∞–∫—Ü–∏–∏"]

    return metadata


# üß† –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–π —Å–µ–∫—Ü–∏–∏ –∞–∫—Ü–∏–∏
def parse_section(driver, section_element):
    content = []
    try:
        title = section_element.text.strip()
        print(f"–ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏: {title}")

        try:
            toggle_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable(section_element.find_element(*SELECTORS["toggle_button"]))
            )
            print(f"–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–µ–∫—Ü–∏–∏: {title}")
            driver.execute_script("arguments[0].click();", toggle_button)
            print(f"–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–ª—è —Å–µ–∫—Ü–∏–∏: {title}")
            desc_container = WebDriverWait(driver, 10).until(
                EC.visibility_of(section_element.find_element(*SELECTORS["section_desc_container"]))
            )
            print(f"–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–ø–∏—Å–∞–Ω–∏—è –≤–∏–¥–µ–Ω –¥–ª—è —Å–µ–∫—Ü–∏–∏: {title}")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≤ —Å–µ–∫—Ü–∏–∏ {title}: {str(e)}")

        try:
            info_elements = section_element.find_elements(*SELECTORS["section_info"])
            for elem in info_elements:
                elem_text = elem.get_attribute('innerText').strip()
                if elem_text:
                    content.append(elem_text)
            print(f"–ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è {title}: {content}")
        except Exception as e:
            print(f"–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ stock__block-info –≤ —Å–µ–∫—Ü–∏–∏ {title}: {str(e)}")

        try:
            desc_elements = WebDriverWait(driver, 10).until(
                EC.visibility_of_all_elements_located(section_element.find_elements(*SELECTORS["section_desc"]))
            )
            for elem in desc_elements:
                elem_text = elem.get_attribute('innerText').strip()
                if elem_text:
                    lines = elem_text.split("\n")
                    content.extend(lines)
            print(f"–ù–∞–π–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {title}: {content}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ stock__block-desc –≤ —Å–µ–∫—Ü–∏–∏ {title}: {str(e)}")
            try:
                desc_elements = section_element.find_elements(*SELECTORS["section_desc"])
                for elem in desc_elements:
                    elem_text = driver.execute_script("return arguments[0].innerText;", elem).strip()
                    if elem_text:
                        lines = elem_text.split("\n")
                        content.extend(lines)
                print(f"–ù–∞–π–¥–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ JavaScript –¥–ª—è {title}: {content}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ stock__block-desc —á–µ—Ä–µ–∑ JavaScript –≤ —Å–µ–∫—Ü–∏–∏ {title}: {str(e)}")

        print(f"–°–ø–∞—Ä—Å–µ–Ω–∞ —Å–µ–∫—Ü–∏—è: {title}, –∫–æ–Ω—Ç–µ–Ω—Ç: {content}")
        return {"title": title, "content": content}
    except Exception as e:
        print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–µ–∫—Ü–∏–∏ {title}: {str(e)}")
        return None


# üß† –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def parse_page(driver, url):
    driver.get(url)
    try:
        WebDriverWait(driver, 15).until(
            EC.presence_of_element_located(SELECTORS["main_title"])
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
        return [], {}

    metadata = extract_metadata(driver, url)
    result = []

    try:
        main_title = WebDriverWait(driver, 15).until(
            EC.presence_of_element_located(SELECTORS["main_title"])
        ).text.strip()
        result.append(("title", main_title))
        print(f"–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {main_title}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {str(e)}")

    try:
        intro_elements = WebDriverWait(driver, 15).until(
            EC.presence_of_all_elements_located(SELECTORS["intro_paragraph"])
        )
        intro_text = [elem.text.strip() for elem in intro_elements if elem.text.strip()]
        if intro_text:
            result.append(("content", intro_text))
            print(f"–í–≤–æ–¥–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ: {intro_text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤–≤–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {str(e)}")

    try:
        section_elements = WebDriverWait(driver, 15).until(
            EC.presence_of_all_elements_located(SELECTORS["section_titles"])
        )
        for section_element in section_elements:
            section = parse_section(driver, section_element)
            if section:
                result.append(("section", section))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–µ–∫—Ü–∏–π: {str(e)}")

    try:
        final_elements = WebDriverWait(driver, 15).until(
            EC.presence_of_all_elements_located(SELECTORS["final_paragraph"])
        )
        final_text = [elem.text.strip() for elem in final_elements if elem.text.strip()]
        if final_text:
            final_content = []
            for text in final_text:
                lines = text.split("\n")
                final_content.extend(lines)
            result.append(("content", final_content))
            print(f"–ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ: {final_content}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∑–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞: {str(e)}")

    print(f"–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {result}")
    return result, metadata


# üíæ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Markdown-—Ñ–∞–π–ª
def save_to_txt(data, metadata, filename="DPO_aktsii.md"):
    save_path = Path.cwd() / filename
    content = []

    # –§–æ—Ä–º–∏—Ä—É–µ–º YAML-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    yaml_metadata = yaml.dump(metadata, allow_unicode=True, sort_keys=False)
    content.append(f"---\n{yaml_metadata}---")

    for item in data:
        if item[0] == "title":
            content.append(f"# {item[1]}")
            content.append(f"[–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É]({metadata['url']})")
        elif item[0] == "content":
            content.extend([line.strip() for line in item[1] if line.strip()])
        elif item[0] == "section":
            section = item[1]
            content.append(f"## {section['title']}")
            content.extend([line.strip() for line in section['content'] if line.strip()])

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ–¥–Ω–∏–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
    final_content = "\n".join(line for line in content if line.strip())

    with open(save_path, 'w', encoding='utf-8') as f:
        f.write(final_content)

    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {save_path}")
    return save_path


# üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
if __name__ == "__main__":
    TARGET_URL = "https://academydpo.org/aktsii"

    driver = get_driver()
    try:
        parsed_data, metadata = parse_page(driver, TARGET_URL)
        save_to_txt(parsed_data, metadata)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
    finally:
        driver.quit()